#include "PlayMode.hpp"

//for the GL_ERRORS() macro:
#include "gl_errors.hpp"

//for glm::value_ptr() :
#include <glm/gtc/type_ptr.hpp>

#include <random>
#include "Load.hpp"
#include "load_save_png.hpp"
#include "read_write_chunk.hpp"
#include "data_path.hpp"
#include <iostream>
#include <fstream>
#include <bitset>
#include <random>

/*
//credit @ https://github.com/xinyis991105/15-466-f20-base1/blob/master/
struct StreamContainer {
	std::vector<PPU466::Palette> palettes;
};
*/
std::ifstream palette_stream;
std::ifstream tile_stream;

std:: random_device rd;
std::mt19937 gen(rd());

Load<void> ps(LoadTagDefault, []() {
	palette_stream.open(data_path("../assets/palettes.asset"));
	tile_stream.open(data_path("../assets/tiles.asset"));
	return;
});

uint8_t get_rand(int a, int b) {
	std::uniform_int_distribution<int> dist_int(a, b);
	return (uint8_t)dist_int(gen);
}

void PlayMode::level_init() {
	if(level == 1) {
		slots[0].pos = glm::vec2(120.0f, 300.0f);
		slots[1].pos = glm::vec2(128.0f, 300.0f);
		slots[2].pos = glm::vec2(136.0f, 300.0f);

		for (int i = 0; i < 3; i++) {
			slots[i].shape = get_rand(1,3);
			slots[i].color = 0;
		}	
	}

	else if (level == 2) {
		slots[0].pos = glm::vec2(120.0f, 300.0f);
		slots[1].pos = glm::vec2(128.0f, 300.0f);
		slots[2].pos = glm::vec2(136.0f, 300.0f);
		slots[3].pos = glm::vec2(144.0f, 300.0f);

		for (int i = 0; i < 4; i++) {
			slots[i].shape = get_rand(1,3);
			slots[i].color = 0;
		}
	}

	else if (level == 3) {
		slots[0].pos = glm::vec2(112.0f, 300.0f);
		slots[1].pos = glm::vec2(120.0f, 300.0f);
		slots[2].pos = glm::vec2(128.0f, 300.0f);
		slots[3].pos = glm::vec2(136.0f, 300.0f);
		slots[4].pos = glm::vec2(144.0f, 300.0f);

		for (int i = 0; i < 5; i++) {
			slots[i].shape = get_rand(1,3);
			slots[i].color = 0;
		}
	}

	else if (level == 4) {
		slots[0].pos = glm::vec2(112.0f, 300.0f);
		slots[1].pos = glm::vec2(120.0f, 300.0f);
		slots[2].pos = glm::vec2(128.0f, 300.0f);
		slots[3].pos = glm::vec2(136.0f, 300.0f);
		slots[4].pos = glm::vec2(144.0f, 300.0f);
		slots[5].pos = glm::vec2(152.0f, 300.0f);

		for (int i = 0; i < 6; i++) {
			slots[i].shape = get_rand(1,3);
			slots[i].color = 0;
		}
	}
}

PlayMode::PlayMode() {
	//TODO:
	// you *must* use an asset pipeline of some sort to generate tiles.
	// don't hardcode them like this!
	// or, at least, if you do hardcode them like this,
	//  make yourself a script that spits out the code that you paste in here
	//   and check that script into your repository.

	//Also, *don't* use these tiles in your game:

	

	std::vector<PPU466::Palette> palettes;
	std::vector<PPU466::Tile> tiles;
	read_chunk(palette_stream, std::string("pale"), &palettes);
	read_chunk(tile_stream, std::string("tile"), &tiles);
	palette_stream.close();
	tile_stream.close();
	std::cout << "Tiles num = " << tiles.size() << std::endl;
	for (int i=0; i < tiles.size(); i++) {
		ppu.tile_table[1+i] = tiles[i];
	}
	for (int i=0; i < palettes.size(); i++) {
		ppu.palette_table[1+i] = palettes[i];
	}
	
	//debugging code, generated by GPT
	{
		auto const &tile0 = ppu.tile_table[1];
    std::cout << "Tile[0] bit0:\n";
    for (int row = 7; row >= 0; --row) { // 注意 NES/PPU 存储行是 bottom-to-top
        std::cout << "row " << row << " : "
                  << std::bitset<8>(tile0.bit0[row]) << "\n";
    }

    std::cout << "Tile[0] bit1:\n";
    for (int row = 7; row >= 0; --row) {
        std::cout << "row " << row << " : "
                  << std::bitset<8>(tile0.bit1[row]) << "\n";
    }
	}

	ppu.background_color = glm::u8vec4(255,99,71,0.5);
	ppu.tile_table[0].bit0 = {
		/*
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		*/
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	};
	ppu.tile_table[0].bit1 = {
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	};

	ppu.palette_table[0] = {
		glm::u8vec4(0, 0, 0, 0),  // transparent
		glm::u8vec4(0, 0, 0, 255),    // black
		glm::u8vec4(0, 0, 0, 0),    // transparent
		glm::u8vec4(0, 0, 0, 0)     // transparent
	};;
	
	for (uint32_t y = 0; y < PPU466::BackgroundHeight; ++y) {
		for (uint32_t x = 0; x < PPU466::BackgroundWidth; ++x) {
			ppu.background[x+PPU466::BackgroundWidth*y] = 0;
		}
	}
	
	level = 1;
	level_init();
}
	

PlayMode::~PlayMode() {
}

bool PlayMode::handle_event(SDL_Event const &evt, glm::uvec2 const &window_size) {

	if (evt.type == SDL_EVENT_KEY_DOWN) {
		if (evt.key.key == SDLK_LEFT) {
			left.downs += 1;
			left.pressed = true;
			return true;
		} else if (evt.key.key == SDLK_RIGHT) {
			right.downs += 1;
			right.pressed = true;
			return true;
		} else if (evt.key.key == SDLK_UP) {
			up.downs += 1;
			up.pressed = true;
			return true;
		} else if (evt.key.key == SDLK_DOWN) {
			down.downs += 1;
			down.pressed = true;
			return true;
		}
	} else if (evt.type == SDL_EVENT_KEY_UP) {
		if (evt.key.key == SDLK_LEFT) {
			left.pressed = false;
			return true;
		} else if (evt.key.key == SDLK_RIGHT) {
			right.pressed = false;
			return true;
		} else if (evt.key.key == SDLK_UP) {
			up.pressed = false;
			return true;
		} else if (evt.key.key == SDLK_DOWN) {
			down.pressed = false;
			return true;
		}
	}

	return false;
}

void PlayMode::update(float elapsed) {

	//slowly rotates through [0,1):
	// (will be used to set background color)
	//background_fade += elapsed / 10.0f;
	//background_fade -= std::floor(background_fade);

	/*
	constexpr float PlayerSpeed = 30.0f;
	if (left.pressed) cats[0].pos.x -= PlayerSpeed * elapsed;
	if (right.pressed) cats[0].pos.x += PlayerSpeed * elapsed;
	if (down.pressed) cats[0].pos.y -= PlayerSpeed * elapsed;
	if (up.pressed) cats[0].pos.y += PlayerSpeed * elapsed;
	*/
	elapsed_sum += elapsed;
	if(elapsed_sum >= 1.0f) {
		elapsed_sum =0;
		slots[0].pos.y -= 8;
	}
	if (left.downs) slots[0].pos.x -= 8;
	if (right.downs) slots[0].pos.x += 8;

	//reset button press counters:
	left.downs = 0;
	right.downs = 0;
	up.downs = 0;
	down.downs = 0;
}

void PlayMode::draw(glm::uvec2 const &drawable_size) {
	//--- set ppu state based on game state ---

	//player sprite:
	switch (level) {
		case 4:
			ppu.sprites[5].x = int8_t(slots[5].pos.x);
			ppu.sprites[5].y = int8_t(slots[5].pos.y);
			ppu.sprites[5].index = slots[5].shape;
			ppu.sprites[5].attributes = slots[5].color;
		
		case 3:
			ppu.sprites[4].x = int8_t(slots[4].pos.x);
			ppu.sprites[4].y = int8_t(slots[4].pos.y);
			ppu.sprites[4].index = slots[4].shape;
			ppu.sprites[4].attributes = slots[4].color;

		case 2:
			ppu.sprites[3].x = int8_t(slots[3].pos.x);
			ppu.sprites[3].y = int8_t(slots[3].pos.y);
			ppu.sprites[3].index = slots[3].shape;
			ppu.sprites[3].attributes = slots[3].color;

		case 1:
			ppu.sprites[2].x = int8_t(slots[2].pos.x);
			ppu.sprites[2].y = int8_t(slots[2].pos.y);
			ppu.sprites[2].index = slots[2].shape;
			ppu.sprites[2].attributes = slots[2].color;
			ppu.sprites[1].x = int8_t(slots[1].pos.x);
			ppu.sprites[1].y = int8_t(slots[1].pos.y);
			ppu.sprites[1].index = slots[1].shape;
			ppu.sprites[1].attributes = slots[1].color;
			ppu.sprites[0].x = int8_t(slots[0].pos.x);
			ppu.sprites[0].y = int8_t(slots[0].pos.y);
			ppu.sprites[0].index = slots[0].shape;
			ppu.sprites[0].attributes = slots[0].color;
	}
	

	//some other misc sprites:
	/*
	for (uint32_t i = 1; i < 63; ++i) {
		float amt = (i + 2.0f * background_fade) / 62.0f;
		ppu.sprites[i].x = int8_t(0.5f * float(PPU466::ScreenWidth) + std::cos( 2.0f * M_PI * amt * 5.0f + 0.01f * cats[0].pos.x) * 0.4f * float(PPU466::ScreenWidth));
		ppu.sprites[i].y = int8_t(0.5f * float(PPU466::ScreenHeight) + std::sin( 2.0f * M_PI * amt * 3.0f + 0.01f * cats[0].pos.y) * 0.4f * float(PPU466::ScreenWidth));
		ppu.sprites[i].index = 32;
		ppu.sprites[i].attributes = 0;
		if (i % 2) ppu.sprites[i].attributes |= 0x80; //'behind' bit
	}
	*/
	//--- actually draw ---
	ppu.draw(drawable_size);
}
