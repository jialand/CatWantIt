#include "PlayMode.hpp"

//for the GL_ERRORS() macro:
#include "gl_errors.hpp"

//for glm::value_ptr() :
#include <glm/gtc/type_ptr.hpp>

#include <random>
#include "Load.hpp"
#include "load_save_png.hpp"
#include "read_write_chunk.hpp"
#include "data_path.hpp"
#include <iostream>
#include <fstream>
#include <bitset>
#include <random>
#include <deque>
#include <cmath>

/*
//credit @ https://github.com/xinyis991105/15-466-f20-base1/blob/master/
struct StreamContainer {
	std::vector<PPU466::Palette> palettes;
};
*/
std::ifstream palette_stream;
std::ifstream tile_stream;

std:: random_device rd;
std::mt19937 gen(rd());
std::deque<PlayMode::Item> item_queue;
bool first_item, game_end = false;

Load<void> ps(LoadTagDefault, []() {
	palette_stream.open(data_path("../assets/palettes.asset"));
	tile_stream.open(data_path("../assets/tiles.asset"));
	return;
});

uint8_t get_rand(int a, int b) {
	std::uniform_int_distribution<int> dist_int(a, b);
	return (uint8_t)dist_int(gen);
}

void PlayMode::level_init() {
	while(!item_queue.empty())
		item_queue.pop_front();

	first_item = true;

	if(level == 1) {
		slots[0].pos = glm::vec2(120.0f, 100.0f);
		slots[1].pos = glm::vec2(128.0f, 100.0f);
		slots[2].pos = glm::vec2(136.0f, 100.0f);

		for (int i = 0; i < 3; i++) {
			slots[i].shape = get_rand(1,3);
			slots[i].color = 0;
		}	
	}

	else if (level == 2) {
		slots[0].pos = glm::vec2(120.0f, 100.0f);
		slots[1].pos = glm::vec2(128.0f, 100.0f);
		slots[2].pos = glm::vec2(136.0f, 100.0f);
		slots[3].pos = glm::vec2(144.0f, 100.0f);

		for (int i = 0; i < 4; i++) {
			slots[i].shape = get_rand(1,3);
			slots[i].color = 0;
		}
	}

	else if (level == 3) {
		slots[0].pos = glm::vec2(112.0f, 100.0f);
		slots[1].pos = glm::vec2(120.0f, 100.0f);
		slots[2].pos = glm::vec2(128.0f, 100.0f);
		slots[3].pos = glm::vec2(136.0f, 100.0f);
		slots[4].pos = glm::vec2(144.0f, 100.0f);

		for (int i = 0; i < 5; i++) {
			slots[i].shape = get_rand(1,3);
			slots[i].color = 0;
		}
	}

	else if (level == 4) {
		slots[0].pos = glm::vec2(112.0f, 100.0f);
		slots[1].pos = glm::vec2(120.0f, 100.0f);
		slots[2].pos = glm::vec2(128.0f, 100.0f);
		slots[3].pos = glm::vec2(136.0f, 100.0f);
		slots[4].pos = glm::vec2(144.0f, 100.0f);
		slots[5].pos = glm::vec2(152.0f, 100.0f);

		for (int i = 0; i < 6; i++) {
			slots[i].shape = get_rand(1,3);
			slots[i].color = 0;
		}
	}

	else {
		game_end = true;
		
	}
}

bool PlayMode::level_complete() {
	for(int i = 0; i <= level + 1; i++) {
		if(slots[i].shape != slots[i].color)
			return false;
	}
	return true;
}

PlayMode::PlayMode() {
	//TODO:
	// you *must* use an asset pipeline of some sort to generate tiles.
	// don't hardcode them like this!
	// or, at least, if you do hardcode them like this,
	//  make yourself a script that spits out the code that you paste in here
	//   and check that script into your repository.

	//Also, *don't* use these tiles in your game:

	

	std::vector<PPU466::Palette> palettes;
	std::vector<PPU466::Tile> tiles;
	read_chunk(palette_stream, std::string("pale"), &palettes);
	read_chunk(tile_stream, std::string("tile"), &tiles);
	palette_stream.close();
	tile_stream.close();
	std::cout << "Tiles num = " << tiles.size() << std::endl;
	for (size_t i=0; i < tiles.size(); i++) {
		if (i == 31) {
			std::cout << "Warning: Preseted tile 32 covered by asset pipeline!"<< std::endl;
		}
		ppu.tile_table[1+i] = tiles[i];
	}
	for (size_t i=0; i < palettes.size(); i++) {
		if (i == 7) {
			std::cout << "Warning: Palette num exceed limitation!"<< std::endl;
		}
		ppu.palette_table[1+i] = palettes[i];
	}
	
	//debugging code, generated by GPT
	{
		auto const &tile0 = ppu.tile_table[1];
    std::cout << "Tile[0] bit0:\n";
    for (int row = 7; row >= 0; --row) { // 注意 NES/PPU 存储行是 bottom-to-top
        std::cout << "row " << row << " : "
                  << std::bitset<8>(tile0.bit0[row]) << "\n";
    }

    std::cout << "Tile[0] bit1:\n";
    for (int row = 7; row >= 0; --row) {
        std::cout << "row " << row << " : "
                  << std::bitset<8>(tile0.bit1[row]) << "\n";
    }
	}

	ppu.background_color = glm::u8vec4(217,221,192,0.5);
	ppu.tile_table[0].bit0 = {
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	};
	ppu.tile_table[0].bit1 = {
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	};

	ppu.tile_table[32].bit0 = {
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	};
	ppu.tile_table[32].bit1 = {
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
	};

	ppu.palette_table[0] = {
		glm::u8vec4(0, 0, 0, 0),  // transparent
		glm::u8vec4(0, 0, 0, 255),    // black
		glm::u8vec4(0, 0, 0, 0),    // transparent
		glm::u8vec4(0, 0, 0, 0)     // transparent
	};;
	
	for (uint32_t y = 0; y < PPU466::BackgroundHeight; ++y) {
		for (uint32_t x = 0; x < PPU466::BackgroundWidth; ++x) {
			ppu.background[x+PPU466::BackgroundWidth*y] = 0;
		}
	}
	
	level = 1;
	level_init();
}
	

PlayMode::~PlayMode() {
}

bool PlayMode::handle_event(SDL_Event const &evt, glm::uvec2 const &window_size) {

	if (evt.type == SDL_EVENT_KEY_DOWN) {
		if (evt.key.key == SDLK_LEFT || evt.key.key == SDLK_A) {
			left.downs += 1;
			left.pressed = true;
			return true;
		} else if (evt.key.key == SDLK_RIGHT || evt.key.key == SDLK_D) {
			right.downs += 1;
			right.pressed = true;
			return true;
		} else if (evt.key.key == SDLK_UP) {
			up.downs += 1;
			up.pressed = true;
			return true;
		} else if (evt.key.key == SDLK_DOWN) {
			down.downs += 1;
			down.pressed = true;
			return true;
		}
	} else if (evt.type == SDL_EVENT_KEY_UP) {
		if (evt.key.key == SDLK_LEFT) {
			left.pressed = false;
			return true;
		} else if (evt.key.key == SDLK_RIGHT) {
			right.pressed = false;
			return true;
		} else if (evt.key.key == SDLK_UP) {
			up.pressed = false;
			return true;
		} else if (evt.key.key == SDLK_DOWN) {
			down.pressed = false;
			return true;
		}
	}

	return false;
}

void PlayMode::update(float elapsed) {

	//slowly rotates through [0,1):
	// (will be used to set background color)
	//background_fade += elapsed / 10.0f;
	//background_fade -= std::floor(background_fade);

	/*
	constexpr float PlayerSpeed = 30.0f;
	if (left.pressed) cats[0].pos.x -= PlayerSpeed * elapsed;
	if (right.pressed) cats[0].pos.x += PlayerSpeed * elapsed;
	if (down.pressed) cats[0].pos.y -= PlayerSpeed * elapsed;
	if (up.pressed) cats[0].pos.y += PlayerSpeed * elapsed;
	*/
	if(game_end) return;

	elapsed_sum += elapsed;
	if( elapsed_sum > 0.7f ) {
		elapsed_sum =0;
		
		//update item position && check if item is hit
		int quant = 0;
		for(Item& item : item_queue) {
			item.pos.y -= 8;
			if(fabs(item.pos.y - 100) < 1e-6) {
				uint8_t hit = (uint8_t)std::round(((item.pos.x - slots[0].pos.x) / 8.0f)); // which slot is hit
				if(item.type == Shape) {
					slots[hit].shape = item.index;
				}
				else {
					slots[hit].color = item.index;
				}
				quant++;
			}
		}
		while(quant--) {
			item_queue.pop_front();
		}
		
		//check if completed
		if(level_complete()) {
			level++;
			level_init();
			return;
		}

		//spawn an item
		uint8_t temp = get_rand(1,3);
		if(first_item || temp == 3) { // 1/3 chance to spawn an item
			first_item = false;
			Item new_item;
			temp = get_rand(1,2);
			if(temp == 1) {
				new_item.type = Shape;
			}
			else {
				new_item.type = Color;
			}
			temp = get_rand(1,3);
			new_item.index = temp;
			temp = get_rand(1, level + 2);
			
			new_item.pos = glm::vec2(slots[temp-1].pos.x, 220);
			item_queue.push_back(new_item);
		}
		
	}
	
	if(game_end) return;

	if (left.downs) {
		Slot s = slots[0];
		for(int i = 0; i <= level; i++) {
			slots[i].shape = slots[i + 1].shape;
			slots[i].color = slots[i + 1].color;
		}
		slots[level + 1].shape = s.shape;
		slots[level + 1].color = s.color;
	}
	else if (right.downs) {
		Slot s = slots[level+1];
		for(int i = level; i >= 0 ; i--) {
			slots[i + 1].shape = slots[i].shape;
			slots[i + 1].color = slots[i].color;
		}
		slots[0].shape = s.shape;
		slots[0].color = s.color;
	}

	//reset button press counters:
	left.downs = 0;
	right.downs = 0;
	up.downs = 0;
	down.downs = 0;
}

void PlayMode::draw(glm::uvec2 const &drawable_size) {
	//--- set ppu state based on game state ---

	//player sprite:
	if(game_end) {
		std::cout<<"drawing game end"<<std::endl;
		
		for (int k = 0; k < 64; ++k) {
			ppu.sprites[k].x = 0;
			ppu.sprites[k].y = 255;     
			ppu.sprites[k].index = 0;
			ppu.sprites[k].attributes = 0;
		}
		ppu.sprites[2].x = int8_t(slots[2].pos.x);
		ppu.sprites[2].y = int8_t(slots[2].pos.y);
		ppu.sprites[2].index = 6;
		ppu.sprites[2].attributes = 0;
		ppu.sprites[1].x = int8_t(slots[1].pos.x);
		ppu.sprites[1].y = int8_t(slots[1].pos.y);
		ppu.sprites[1].index = 5;
		ppu.sprites[1].attributes = 0;
		ppu.sprites[0].x = int8_t(slots[0].pos.x);
		ppu.sprites[0].y = int8_t(slots[0].pos.y);
		ppu.sprites[0].index = 4;
		ppu.sprites[0].attributes = 0;
		
		ppu.draw(drawable_size);
		return;
	}

	switch (level) {
		case 4:
			ppu.sprites[5].x = int8_t(slots[5].pos.x);
			ppu.sprites[5].y = int8_t(slots[5].pos.y);
			ppu.sprites[5].index = slots[5].shape;
			ppu.sprites[5].attributes = slots[5].color;
		
		case 3:
			ppu.sprites[4].x = int8_t(slots[4].pos.x);
			ppu.sprites[4].y = int8_t(slots[4].pos.y);
			ppu.sprites[4].index = slots[4].shape;
			ppu.sprites[4].attributes = slots[4].color;

		case 2:
			ppu.sprites[3].x = int8_t(slots[3].pos.x);
			ppu.sprites[3].y = int8_t(slots[3].pos.y);
			ppu.sprites[3].index = slots[3].shape;
			ppu.sprites[3].attributes = slots[3].color;

		case 1:
			ppu.sprites[2].x = int8_t(slots[2].pos.x);
			ppu.sprites[2].y = int8_t(slots[2].pos.y);
			ppu.sprites[2].index = slots[2].shape;
			ppu.sprites[2].attributes = slots[2].color;
			ppu.sprites[1].x = int8_t(slots[1].pos.x);
			ppu.sprites[1].y = int8_t(slots[1].pos.y);
			ppu.sprites[1].index = slots[1].shape;
			ppu.sprites[1].attributes = slots[1].color;
			ppu.sprites[0].x = int8_t(slots[0].pos.x);
			ppu.sprites[0].y = int8_t(slots[0].pos.y);
			ppu.sprites[0].index = slots[0].shape;
			ppu.sprites[0].attributes = slots[0].color;
	}

	//draw instruction
	ppu.sprites[8].x = uint8_t(16);
	ppu.sprites[8].y = uint8_t(184);
	ppu.sprites[8].index = 3;
	ppu.sprites[8].attributes = 0;
	ppu.sprites[7].x = uint8_t(16);
	ppu.sprites[7].y = uint8_t(192);
	ppu.sprites[7].index = 2;
	ppu.sprites[7].attributes = 0;
	ppu.sprites[6].x = uint8_t(16);
	ppu.sprites[6].y = uint8_t(200);
	ppu.sprites[6].index = 1;
	ppu.sprites[6].attributes = 0;

	ppu.sprites[11].x = uint8_t(24);
	ppu.sprites[11].y = uint8_t(184);
	ppu.sprites[11].index = 7;
	ppu.sprites[11].attributes = 0;
	ppu.sprites[10].x = uint8_t(24);
	ppu.sprites[10].y = uint8_t(192);
	ppu.sprites[10].index = 7;
	ppu.sprites[10].attributes = 0;
	ppu.sprites[9].x = uint8_t(24);
	ppu.sprites[9].y = uint8_t(200);
	ppu.sprites[9].index = 7;
	ppu.sprites[9].attributes = 0;

	ppu.sprites[14].x = uint8_t(32);
	ppu.sprites[14].y = uint8_t(184);
	ppu.sprites[14].index = 3;
	ppu.sprites[14].attributes = 3;
	ppu.sprites[13].x = uint8_t(32);
	ppu.sprites[13].y = uint8_t(192);
	ppu.sprites[13].index = 2;
	ppu.sprites[13].attributes = 2;
	ppu.sprites[12].x = uint8_t(32);
	ppu.sprites[12].y = uint8_t(200);
	ppu.sprites[12].index = 1;
	ppu.sprites[12].attributes = 1;

	//clean item from last frame
	for (int k = 15; k < 64; ++k) {
		ppu.sprites[k].x = 0;
		ppu.sprites[k].y = 255;     //outside screen?
		ppu.sprites[k].index = 0;
		ppu.sprites[k].attributes = 0;
	}

	//draw item queue
	int i=15;
	for(Item item : item_queue) {
		ppu.sprites[i].x = int8_t(item.pos.x);
		ppu.sprites[i].y = int8_t(item.pos.y);
		if(item.type == Shape) {
			ppu.sprites[i].index = item.index;
			ppu.sprites[i].attributes = 0;
		}
		else { // item is color
			ppu.sprites[i].index = 32;
			ppu.sprites[i].attributes = item.index;
		}
		i++;
	}

	//some other misc sprites:
	/*
	for (uint32_t i = 1; i < 63; ++i) {
		float amt = (i + 2.0f * background_fade) / 62.0f;
		ppu.sprites[i].x = int8_t(0.5f * float(PPU466::ScreenWidth) + std::cos( 2.0f * M_PI * amt * 5.0f + 0.01f * cats[0].pos.x) * 0.4f * float(PPU466::ScreenWidth));
		ppu.sprites[i].y = int8_t(0.5f * float(PPU466::ScreenHeight) + std::sin( 2.0f * M_PI * amt * 3.0f + 0.01f * cats[0].pos.y) * 0.4f * float(PPU466::ScreenWidth));
		ppu.sprites[i].index = 32;
		ppu.sprites[i].attributes = 0;
		if (i % 2) ppu.sprites[i].attributes |= 0x80; //'behind' bit
	}
	*/
	//--- actually draw ---
	ppu.draw(drawable_size);
}
